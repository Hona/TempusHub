@using Google.Apis.YouTube.v3.Data;
@using TempusHub.Application.Services
@using TempusHub.Core.Utilities

@inject YoutubeApiService _youtubeApiService
@if (Videos == null || Videos.Count == 0)
{
    <MudText Color="Color.Warning">No videos found</MudText>
}
else
{
    <MudLink Href=@($"https://youtube.com/channel/{Videos.First().Snippet.ChannelId}")
             Typo="Typo.h4">
        @Videos.First().Snippet.ChannelTitle
    </MudLink>
    
    <MudGrid Spacing="2" Justify="Justify.Center">

        @foreach (var video in Videos.OrderByDescending(x => x.Snippet.PublishedAt ?? DateTime.MinValue)
            .Take(VideoCount)
            .ToArray())
        {
            <MudItem>
                <MudCard Style="margin: 0.5rem" Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                @video.Snippet.Title
                            </MudText>
                            <MudText Typo="Typo.body2">
                                @(video.Snippet.Description[..50])...
                            </MudText>
                            <MudText Typo="Typo.caption">
                                @video.Snippet.PublishedAt?.GetTimeStringSinceDateTime()
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardMedia Image="@(video.Snippet.Thumbnails.Maxres?.Url ?? video.Snippet.Thumbnails.Medium.Url)" Height="200" />
                    <MudCardActions>
                        <MudButton Link="@TempusUtilities.GetYoutubeUrl(video.Snippet.ResourceId.VideoId)" 
                                   StartIcon="@Icons.Custom.Brands.YouTube">
                            Watch
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code{
    public List<PlaylistItem> Videos;

    [Parameter]
    public string Channel { get; set; }
    [Parameter]
    public bool IsId { get; set; }
    [Parameter]
    public int VideoCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Videos = await _youtubeApiService.GetAllVideosAsync(Channel, IsId, 1);
    }

    protected override async Task OnParametersSetAsync() => await OnInitializedAsync();

}