@page "/maps/{MapName}"
@page "/map/{MapName}"
@page "/maps/{MapName}/{ZoneSelector}"
@page "/map/{MapName}/{ZoneSelector}"

@using TempusHub.Application.Services
@using TempusHub.Core.Constants
@using TempusHub.Core.Utilities
@using TempusApi
@using TempusApi.Enums
@using TempusApi.Models
@using TempusApi.Models.DetailedMapList
@using TempusApi.Models.Responses

@inject TempusCacheService _tempusCacheService
@inject ITempusClient _tempusDataService
@inject NavigationManager _navigationManager

<MudText Typo="Typo.h4">
    @(FullMapOverView?.MapInfo?.Name ?? MapName)
</MudText>

@if (string.IsNullOrWhiteSpace(MapName))
{
    <MudText Color="Color.Error">
        Invalid map name... (is it blank?)
    </MudText>
}
@if (FullMapOverView == null)
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
}
else
{
    <div style="display: flex; justify-content: flex-start; align-items: center">
        <img class="rank-icon" width="32" height="32" src="@LocalFileConstants.SoldierIcon"> T@(FullMapOverView?.TierInfo.Soldier)  
        <img class="rank-icon" width="32" height="32" src="@LocalFileConstants.DemomanIcon"> T@(FullMapOverView?.TierInfo.Demoman)
    </div>
    <div style="display: flex; justify-content: flex-start; align-items: center">
        <img class="rank-icon" width="32" height="32" src="@LocalFileConstants.SoldierIcon"> 
        @if (!string.IsNullOrWhiteSpace(FullMapOverView?.Videos.Soldier))
        {
            <MudLink Href="@(TempusUtilities.GetYoutubeUrl(FullMapOverView?.Videos.Soldier))">
                Showcase
            </MudLink>
        }
        else
        {
            <MudText>
                No showcase
            </MudText>
        }  
        <img class="rank-icon" width="32" height="32" src="@LocalFileConstants.DemomanIcon"> 
        @if (!string.IsNullOrWhiteSpace(FullMapOverView?.Videos.Demoman))
        {
            <MudLink Href="@(TempusUtilities.GetYoutubeUrl(FullMapOverView?.Videos.Demoman))">
                Showcase
            </MudLink>
        }
        else
        {
            <MudText>
                No showcase
            </MudText>
        }
    </div>
}

@if (FullMapOverView == null)
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
}
else
{
    <MudSelect T="string"
               Label="View"
               Strict="true"
               Variant="Variant.Outlined"
               AnchorOrigin="Origin.BottomCenter"
               Value="ZoneSelector"
               ValueChanged="@(x => { _navigationManager.NavigateTo("/map/" + (FullMapOverView?.MapInfo?.Name ?? MapName) + "/" + x); })"
               ToStringFunc="@(x => x is null 
                                 ? "Map" 
                                 : x.StartsWith("b") 
                                     ? "Bonus " + x.Substring(1,x.Length - 1) 
                                     : "Course " + x.Substring(1,x.Length - 1))"
               Style="max-width: 150px; width: 150px">
        <MudSelectItem T="string" Value="@null"/>
        @if ((FullMapOverView?.ZoneCounts?.Course ?? 0) > 1)
        {
            for (int i = 1; i <= FullMapOverView.ZoneCounts.Course; i++)
            {
                var index = i;
                <MudSelectItem T="string" Value="@("c" + index)"/>
            }
        }
        @if ((FullMapOverView?.ZoneCounts?.Bonus ?? 0) >= 1)
        {
            for (int i = 1; i <= FullMapOverView.ZoneCounts.Bonus; i++)
            {
                var index = i;
                <MudSelectItem T="string" Value="@("b" + index)"/>
            }
        }
    </MudSelect>
    
    <MudGrid Spacing="2">
        <MudItem>
            @if (ZonedSoldierRecords.Count == 0)
            {
                <MudText>
                    No soldier runs
                </MudText>
            }
            else
            {
                <MudTable Items="ZonedSoldierRecords.Select((x, i) => (Index: i, Record: x))"
                          Hover
                          Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh colspan="2">Soldier</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            #@(context.Index + 1): @TempusUtilities.FormattedDuration(context.Record.Duration)
                        </MudTd>
                        <MudTd>
                            <MudLink Href="@HrefHelper.GetPlayerInfoPath(context.Record.Id)">
                                @(_tempusCacheService.GetRealName(context.Record.Id) ?? context.Record.Name)
                            </MudLink>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudItem>
        
        <MudItem>
            @if (ZonedDemomanRecords.Count == 0)
            {
                <MudText>
                    No demoman runs
                </MudText>
            }
            else
            {
                <MudTable Items="ZonedDemomanRecords.Select((x, i) => (Index: i, Record: x))"
                          Hover
                          Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh colspan="2">Demoman</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            #@(context.Index + 1): @TempusUtilities.FormattedDuration(context.Record.Duration)
                        </MudTd>
                        <MudTd>
                            <MudLink Href="@HrefHelper.GetPlayerInfoPath(context.Record.Id)">
                                @(_tempusCacheService.GetRealName(context.Record.Id) ?? context.Record.Name)
                            </MudLink>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudItem>

    </MudGrid>
}

@code{
    [Parameter]
    public string MapName { get; set; }

    public MapFullOverviewModel FullMapOverView { get; set; }
    public List<RecordModel> ZonedSoldierRecords { get; set; }
    public List<RecordModel> ZonedDemomanRecords { get; set; }

    [Parameter]
    public string ZoneSelector { get; set; }

    protected override async Task OnInitializedAsync()
    {
        FullMapOverView = await _tempusDataService.GetFullMapOverviewAsync(MapName);

        if (string.IsNullOrWhiteSpace(ZoneSelector))
        {
            ZoneSelector = "map";
        }

        ZoneSelector = ZoneSelector.ToLower();

        if (ZoneSelector.Contains("m", StringComparison.InvariantCultureIgnoreCase))
        {
            ZonedSoldierRecords = FullMapOverView.SoldierRuns;
            ZonedDemomanRecords = FullMapOverView.DemomanRuns;
        }
        else if (ZoneSelector.Contains("c", StringComparison.InvariantCultureIgnoreCase)
            && int.TryParse(string.Join(string.Empty, ZoneSelector.Skip(1)), out var zoneCourseIndex))
        {
            var zonedTimes = await _tempusDataService.GetTopZonedTimes(FullMapOverView.MapInfo.Name, ZoneType.Course, zoneCourseIndex);
            ZonedSoldierRecords = zonedTimes.Runs.SoldierRuns.Select(x => x.ToRecordModel()).ToList();
            ZonedDemomanRecords = zonedTimes.Runs.DemomanRuns.Select(x => x.ToRecordModel()).ToList();
        }
        else if (ZoneSelector.Contains("b", StringComparison.InvariantCultureIgnoreCase)
            && int.TryParse(string.Join(string.Empty, ZoneSelector.Skip(1)), out var zoneBonusIndex))
        {
            var zonedTimes = await _tempusDataService.GetTopZonedTimes(FullMapOverView.MapInfo.Name, ZoneType.Bonus, zoneBonusIndex);
            ZonedSoldierRecords = zonedTimes.Runs.SoldierRuns.Select(x => x.ToRecordModel()).ToList();
            ZonedDemomanRecords = zonedTimes.Runs.DemomanRuns.Select(x => x.ToRecordModel()).ToList();
        }
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync() => await OnInitializedAsync();
}