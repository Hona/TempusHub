@page "/recentrecords"
@page "/recentrecords/{RecentRecordType}"
@using TempusHub.Application.Services
@using TempusHub.Core.Constants
@using TempusHub.Core.Models
@using TempusHub.Core.Utilities
@using TempusApi
@using TempusApi.Models.Activity

@inject Tempus _tempusDataService
@inject TempusCacheService _tempusCacheService
@inject NavigationManager _navigationManager

@implements IDisposable

<MudText Typo="Typo.h4"
         Style="display: flex; justify-content: space-between; align-items: center"
         Class="page-header-dropdown">
    Recent Records

    <MudSelect T="string"
               Label="Filter"
               Strict="true"
               Variant="Variant.Outlined"
               AnchorOrigin="Origin.BottomCenter"
               Value="RecentRecordType"
               ValueChanged="@(x => { _navigationManager.NavigateTo("/recentrecords/" + x); })"
               ToStringFunc="@(x => x is null ? "All" : x.ToStandardCasing())"
               Style="max-width: 150px; width: 150px">
        <MudSelectItem T="string" Value="@(null)"/>
        <MudSelectItem T="string" Value='@("map")'/>
        <MudSelectItem T="string" Value='@("course")'/>
        <MudSelectItem T="string" Value='@("bonus")'/>
        <MudSelectItem T="string" Value='@("map_top")'/>
    </MudSelect>
</MudText>
<MudTable Items="@_recordsWithZonedData"
              Hover
              Breakpoint="Breakpoint.Sm"
              Loading="@(_recordsWithZonedData == null)"
              LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Class</MudTh>
            <MudTh>Map</MudTh>
            <MudTh>Player</MudTh>
            <MudTh>Time</MudTh>
            <MudTh>Date</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Class">
                <img width="24" height="24" src="@(context.Record.RecordInfo.Class == 4 ? LocalFileConstants.DemomanIcon : LocalFileConstants.SoldierIcon)"/>
            </MudTd>
            <MudTd DataLabel="Map">
                <MudLink Href="@HrefHelper.GetMapInfoPath(context.Record.MapInfo.Name)">
                    @(context.Record.MapInfo.Name + " " + context.Record.ZoneInfo.Type switch
                    {
                        "course" => "C" + context.Record.ZoneInfo.Zoneindex + " ",
                        "bonus" => "B" + context.Record.ZoneInfo.Zoneindex,
                        _ => ""
                    })
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Player">
                <MudLink Href="@HrefHelper.GetPlayerInfoPath(context.Record.PlayerInfo.Id)">
                    @(_tempusCacheService.GetRealName(context.Record.PlayerInfo.Id) ?? context.Record.PlayerInfo.Name)
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Time">
                <MudLink Href="@HrefHelper.GetRunInfoPath(context.Record.RecordInfo.Id)">
                    @TempusUtilities.FormattedDuration(context.Record.RecordInfo.Duration)
                    @if (context.Record is MapTop mapTopRecord && context.Record is CachedTempusRecordBase cacheRecord)
                    {
                        @(" (#" + mapTopRecord.Rank + " WR +" + (cacheRecord.CachedTime is {CurrentWrDuration: { } }
                            ? TempusUtilities.FormattedDuration(cacheRecord.CachedTime.CurrentWrDuration.Value - context.Record.RecordInfo.Duration)
                            : "N/A"));
                    }
                    else if (context.Record is CachedTempusRecordBase cacheRecord2)
                    {
                        @(" (" + TempusUtilities.GetWrSplitString(cacheRecord2.CachedTime, context.ZonedData))
                    }
                    else
                    {
                        @(" (N/A")
                    })
                    
                </MudLink>
            </MudTd>
            <MudTd DataLabel="Date">
                @TempusUtilities.GetDateFromSeconds(context.Record.RecordInfo.Date).GetTimeStringSinceDateTime()
            </MudTd>
        </RowTemplate>
    </MudTable>

@code {
    [Parameter]
    public string RecentRecordType { get; set; }

    List<RecordWithZonedData> _recordsWithZonedData = new();

    protected override void OnInitialized()
    {
        _tempusCacheService.DataUpdated += OnDataUpdated;
        LoadData(false);
    }

    private void OnDataUpdated(object sender, EventArgs e)
    {
        LoadData(false);
        InvokeAsync(StateHasChanged);
    }

    void LoadData(bool forceUpdateState = true)
    {
        List<RecordWithZonedData> recordsWithZonedDataTemp = new List<RecordWithZonedData>();
        if (string.IsNullOrWhiteSpace(RecentRecordType))
        {
            RecentRecordType = "Map";
        }

        recordsWithZonedDataTemp = RecentRecordType.ToLower() switch
        {
            "map" => _tempusCacheService.RecentActivityWithZonedData.MapWr.ToList(),
            "course" => _tempusCacheService.RecentActivityWithZonedData.CourseWr.ToList(),
            "bonus" => _tempusCacheService.RecentActivityWithZonedData.BonusWr.ToList(),
            "map_top" => _tempusCacheService.RecentActivityWithZonedData.MapTt.ToList(),
            _ => throw new Exception("No activity data for that type.")
        };

        _recordsWithZonedData = recordsWithZonedDataTemp.OrderByDescending(x => x.Record.RecordInfo.Date).ToList();

        if (forceUpdateState)
        {
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        OnInitialized();
        base.OnParametersSet();
    }

    public void Dispose()
    {
        _tempusCacheService.DataUpdated -= OnDataUpdated;
    }
}
