@using TempusApi
@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService _localStorage

<MudThemeProvider Theme="CurrentTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())" />
        <MudSpacer />
        <MudHidden Breakpoint="Breakpoint.MdAndDown">
            <SearchBar />
            <MudSpacer />
            <div>
                <SponsorButton />
                @ThemeToggleButton
                <DiscordButton />
                <GitHubButton />
                <MudButton Color="Color.Inherit" Link="https://tempus.xyz" Target="_blank">
                    Tempus.xyz
                </MudButton>
            </div>
        </MudHidden>
        <MudHidden Invert Breakpoint="Breakpoint.MdAndDown">
            <MudIconButton Icon="@Icons.Material.Filled.MoreVert" 
                           Color="Color.Inherit" 
                           Edge="Edge.End" 
                           OnClick="() => _breakpointDrawerOpen = true"/>
            
            <MudDrawer @bind-Open="@_breakpointDrawerOpen"
                       Anchor="@Anchor.End"
                       Elevation="1"
                       Variant="@DrawerVariant.Temporary">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h6">Menu</MudText>
                </MudDrawerHeader>
                <SearchBar/>
                <SponsorButton/>
                @ThemeToggleButton
                <DiscordButton/>
                <GitHubButton/>
                <MudButton Color="Color.Inherit" Link="https://tempus.xyz" Target="_blank">
                    Tempus.xyz
                </MudButton>
            </MudDrawer>
        </MudHidden>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5">Tempus Hub</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent >
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="padding-top: 1rem">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code 
{
    private bool _breakpointDrawerOpen;
    
    private bool _themeToggled;
    private bool _themeToggledOnLocalStorage;
    
    private MudTheme CurrentTheme => _themeToggled ? _darkTheme : _lightTheme;

    private MudTheme _lightTheme = new();
    private MudTheme _darkTheme = new()
    {
        Palette = new Palette()
        {
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGrey = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Divider = "rgba(255,255,255, 0.12)",
            DividerLight = "rgba(255,255,255, 0.06)",
            TableLines = "rgba(255,255,255, 0.12)",
            LinesDefault = "rgba(255,255,255, 0.12)",
            LinesInputs = "rgba(255,255,255, 0.3)",
            TextDisabled = "rgba(255,255,255, 0.2)",
            Primary = "#FF72A2"
        }
    };
    
    bool _drawerOpen = true;

    private RenderFragment ThemeToggleButton => @<MudToggleIconButton Title="Dark Mode" Icon="@Icons.Material.Filled.DarkMode"
                                                                      ToggledTitle="Light Mode" ToggledIcon="@Icons.Material.Filled.LightMode"
                                                                      @bind-Toggled="_themeToggled"
                                                                      Color="Color.Inherit"/>;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _themeToggled = await _localStorage.GetItemAsync<bool>("dark-theme");
            _themeToggledOnLocalStorage = _themeToggled;
            StateHasChanged();
        }
        else if (_themeToggled != _themeToggledOnLocalStorage)
        {
            await _localStorage.SetItemAsync("dark-theme", _themeToggled);
        }
    }
}