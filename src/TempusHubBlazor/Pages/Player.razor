@page "/player/{PlayerId}"

@using TempusHubBlazor.Data
@using TempusHubBlazor.Models.Tempus.Responses
@using BlazorStrap
@using TempusHubBlazor.Services
@using TempusHubBlazor.Utilities
@using TempusHubBlazor.Models.Tempus.Rank
@using TempusHubBlazor.Constants
@using TempusHubBlazor.Models;

@inject TempusDataService TempusDataService
@inject TempusCacheService TempusCacheService

@if (PlayerRank == null)
{
    <p>Player not found</p>
}
else
{
<div class="heading-wrapper">
    <h1><span style="color: @RankColor.BracketsColor">[</span><span style="color: @RankColor.TitleColor">@(HigherRankInfo.Title)</span><span style="color: @RankColor.BracketsColor">] </span><span style="color: @RankColor.NameColor">@(TempusCacheService.GetRealName(PlayerRank.PlayerInfo.Id) ?? PlayerRank.PlayerInfo.Name)</span></h1>
</div>
<div class="slim-center">
    <br />
    @if (PlayerRank.PlayerInfo.Country != null)
    {
        <span>From @PlayerRank.PlayerInfo.Country</span>
    }
    @if (PlayerRank.PlayerInfo.LastSeen.HasValue)
    {
        <p>First played @(TempusUtilities.GetDateFromSeconds(PlayerRank.PlayerInfo.FirstSeen).GetTimeStringSinceDateTime())</p>
    }
    @if (PlayerRank.ClassRankInfo.SoldierRank.Rank > 0)
    {
        <h3><img width="32" height="32" src="@LocalFileConstants.SoldierIcon" /> Rank @PlayerRank.ClassRankInfo.SoldierRank.Rank | @PlayerRank.ClassRankInfo.SoldierRank.Points points</h3>
    }
    @if (PlayerRank.ClassRankInfo.DemoRank.Rank > 0)
    {
        <h3><img width="32" height="32" src="@LocalFileConstants.DemomanIcon" /> Rank @PlayerRank.ClassRankInfo.DemoRank.Rank | @PlayerRank.ClassRankInfo.DemoRank.Points points</h3>
    }
</div>
}

@code{
    [Parameter]
    public string PlayerId { get; set; }

    public Rank PlayerRank { get; set; }
    public BaseRank HigherRankInfo { get; set; }
    public TempusRankColor RankColor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PlayerRank = await TempusDataService.GetUserRankAsync(PlayerId);
        HigherRankInfo = PlayerRank.ClassRankInfo.DemoRank.Rank <= PlayerRank.ClassRankInfo.SoldierRank.Rank ? (BaseRank)PlayerRank.ClassRankInfo.DemoRank : (BaseRank)PlayerRank.ClassRankInfo.SoldierRank;
        RankColor = TempusCacheService.TempusRankColors.First(x => x.Title.ToLower() == HigherRankInfo.Title.ToLower());
    }
}
