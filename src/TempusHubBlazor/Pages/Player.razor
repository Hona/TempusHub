@page "/player/{PlayerId}"

@using TempusHubBlazor.Data
@using TempusHubBlazor.Models.Tempus.PlayerStats
@using TempusHubBlazor.Services
@using TempusHubBlazor.Utilities
@using TempusHubBlazor.Models.Tempus.Rank
@using TempusHubBlazor.Constants
@using TempusHubBlazor.Models;

@inject TempusDataService _tempusDataService
@inject TempusCacheService _tempusCacheService

@if (_playerNotFound)
{
    <MudText Color="Color.Warning">
        That player was not found (this could be a bug with Tempus.xyz...)
    </MudText>
}
else if (PlayerStats is null)
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
}
else
{
    <MudText Typo="Typo.h4">
        <span style="color: @RankColor.BracketsColor">[</span>
        <span style="color: @RankColor.TitleColor">@(HigherRankInfo.Title)</span>
        <span style="color: @RankColor.BracketsColor">] </span>
        <span style="color: @RankColor.NameColor">@(_tempusCacheService.GetRealName(PlayerStats.PlayerInfo.Id) ?? PlayerStats.PlayerInfo.Name)</span>
    </MudText>
    <MudDivider Style="margin: 1rem 0 1rem 0"/>
    @if (PlayerStats.PlayerInfo.Country != null)
    {
        <MudText>From @PlayerStats.PlayerInfo.Country</MudText>
    }
    @if (PlayerStats.PlayerInfo.LastSeen.HasValue)
    {
        <MudText>First played @(TempusUtilities.GetDateFromSeconds(PlayerStats.PlayerInfo.FirstSeen).GetTimeStringSinceDateTime())</MudText>
    }
    @if (PlayerStats.ClassRankInfo.SoldierRank.Rank > 0)
    {
        <MudText Typo="Typo.h6">
            <img class="rank-icon" width="32" height="32" src="@LocalFileConstants.SoldierIcon"/> Rank @PlayerStats.ClassRankInfo.SoldierRank.Rank · @PlayerStats.ClassRankInfo.SoldierRank.Points points
        </MudText>
    }
    @if (PlayerStats.ClassRankInfo.DemoRank.Rank > 0)
    {
        <MudText Typo="Typo.h6">
            <img class="rank-icon" width="32" height="32" src="@LocalFileConstants.DemomanIcon"/> Rank @PlayerStats.ClassRankInfo.DemoRank.Rank · @PlayerStats.ClassRankInfo.DemoRank.Points points
        </MudText>
    }
    @if (PlayerStats.WorldRecordStats != null)
    {
        <MudText Typo="Typo.h6">
            World Records
        </MudText>
        @if (PlayerStats.WorldRecordStats.Map != null)
        {
            <MudText>Map: @(PlayerStats.WorldRecordStats.Map.Count) - @PlayerStats.WorldRecordStats.Map.Points points</MudText>
        }
        @if (PlayerStats.WorldRecordStats.Course != null)
        {
            <MudText>Course: @(PlayerStats.WorldRecordStats.Course.Count) - @PlayerStats.WorldRecordStats.Course.Points points</MudText>
        }
        @if (PlayerStats.WorldRecordStats.Bonus != null)
        {
            <MudText>Bonus: @(PlayerStats.WorldRecordStats.Bonus.Count) - @PlayerStats.WorldRecordStats.Bonus.Points points</MudText>
        }
        @if (PlayerStats.WorldRecordStats.Trick != null)
        {
            <MudText>Trick: @(PlayerStats.WorldRecordStats.Trick.Count) - @PlayerStats.WorldRecordStats.Trick.Points points</MudText>
        }
    }
    @if (PlayerStats.TopTimeStats != null)
    {
        <MudText Typo="Typo.h6">Top Times</MudText>
        @if (PlayerStats.TopTimeStats.Map != null)
        {
            <MudText>Map: @(PlayerStats.TopTimeStats.Map.Count) - @PlayerStats.TopTimeStats.Map.Points points</MudText>
        }
        @if (PlayerStats.TopTimeStats.Course != null)
        {
            <MudText>Course: @(PlayerStats.TopTimeStats.Course.Count) - @PlayerStats.TopTimeStats.Course.Points points</MudText>
        }
        @if (PlayerStats.TopTimeStats.Bonus != null)
        {
            <MudText>Bonus: @(PlayerStats.TopTimeStats.Bonus.Count) - @PlayerStats.TopTimeStats.Bonus.Points points</MudText>
        }
        @if (PlayerStats.TopTimeStats.Trick != null)
        {
            <MudText>Trick: @(PlayerStats.TopTimeStats.Trick.Count) - @PlayerStats.TopTimeStats.Trick.Points points</MudText>
        }
    }
}

@code
{
    [Parameter]
    public string PlayerId { get; set; }

    public PlayerStatsModel PlayerStats { get; set; }
    public BaseRank HigherRankInfo { get; set; }
    public TempusRankColor RankColor { get; set; }

    private bool _playerNotFound;

    protected override async Task OnInitializedAsync()
    {
        _playerNotFound = false;       

        var playerStats = await _tempusDataService.GetUserStatsAsync(PlayerId);

        if (playerStats is null)
        {
            _playerNotFound = true;
            return;
        }

        playerStats.ClassRankInfo.DemoRank.Title ??= "Peon";
        playerStats.ClassRankInfo.SoldierRank.Title ??= "Peon";
        
        PlayerStats = playerStats;
        
        HigherRankInfo = PlayerStats.ClassRankInfo.DemoRank.Rank <= PlayerStats.ClassRankInfo.SoldierRank.Rank 
            ? PlayerStats.ClassRankInfo.DemoRank 
            : PlayerStats.ClassRankInfo.SoldierRank;
        
        RankColor = _tempusCacheService.TempusRankColors
            .First(x => string.Equals(x.Title, HigherRankInfo.Title ?? "Peon", StringComparison.CurrentCultureIgnoreCase));
    }

    protected override async Task OnParametersSetAsync() => await OnInitializedAsync();
}
