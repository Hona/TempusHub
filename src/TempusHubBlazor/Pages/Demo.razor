@page "/demo/{DemoId}"

@using TempusHubBlazor.Data
@using TempusHubBlazor.Models.Tempus.Responses
@using TempusHubBlazor.Constants
@using TempusHubBlazor.Services
@using TempusHubBlazor.Utilities

@inject TempusCacheService TempusCacheService
@inject TempusDataService TempusDataService
@if (DemoInfo == null) { <span><i>Loading...</i></span> }
else
{
<div class="heading-wrapper">
    <h1 class="slim-center"><a href="@HrefHelper.GetServerInfoPath(DemoInfo.ServerInfo.Shortname)">@(DemoInfo.ServerInfo.Shortname)</a> | <a href="@HrefHelper.GetMapInfoPath(DemoInfo.Overview.MapName)">@DemoInfo.Overview.MapName</a></h1>
</div>
<br />

<table align="center" class="table table-dark table-bordered slim-center">
    <thead>
        <tr>
            <th>Class</th>
            <th>Player</th>
            <th>Run Type</th>
            <th>Zone</th>
            <th>Time</th>
            <th>Date</th>
            <th>Ticks</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var run in DemoInfo.Runs)
        {
            <tr>
                <td><img width="24" height="24" src="@(run.RunInfo.PlayerClass == 4 ? LocalFileConstants.DemomanIcon : LocalFileConstants.SoldierIcon)" /></td>
                <td><a href="@HrefHelper.GetPlayerInfoPath(run.PlayerInfo.Id ?? 0)">@(TempusCacheService.GetRealName(run.PlayerInfo.Id ?? 0) ?? run.PlayerInfo.Name)</a></td>
                <td>@(run.RunType.ToUpper() == "TOP" ? "Top" : run.RunType.ToUpper())</td>
                <td>@(run.RecordZoneInfo.Type.ToLower() == "map" ? "Map" : run.RecordZoneInfo.Type.ToStandardCasing() + " " + run.RecordZoneInfo.ZoneIndex)</td>
                <td><a href="@HrefHelper.GetRunInfoPath(run.RunInfo.Id)">@(TempusUtilities.FormattedDuration(run.RunInfo.Duration))</a></td>
                <td>@TempusUtilities.GetDateFromSeconds(run.RunInfo.Date).GetTimeStringSinceDateTime()</td>
                <td>@run.RunInfo.StartTick - @run.RunInfo.EndTick</td>
            </tr>
        }
    </tbody>
</table>
}
@code {
    [Parameter]
    public string DemoId { get; set; }
    public ServerDemoFullOverview DemoInfo { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(DemoId, out var parsedDemoId))
        {
            DemoInfo = await TempusDataService.GetDemoInfoAsync(parsedDemoId);
        }
        else
        {
            DemoInfo = null;
        }
    }

    protected override async Task OnParametersSetAsync() => await OnInitializedAsync();
}