@using BlazorStrap
@using Google.Apis.YouTube.v3.Data;
@using TempusHubBlazor.Services
@using TempusHubBlazor.Utilities

@inject YoutubeAPIService YoutubeAPIService

@if (Videos == null || Videos.Count == 0)
{
    <span>No videos found</span>
}
else
{
<h4><a href="https://youtube.com/channel/@Videos.First().Snippet.ChannelId">@Videos.First().Snippet.ChannelTitle</a></h4>
<BSCard IsInverse="true" CardType="@ParentCardType">
    @foreach (var video in Videos.Take(VideoCount).ToArray())
    {
        <BSCard IsInverse="true">
            <a href="@TempusUtilities.GetYoutubeUrl(video.Snippet.ResourceId.VideoId)"><BSCard CardType="CardType.Image" VerticalAlignment="VerticalAlignment.Top" src="@(video.Snippet.Thumbnails.Maxres?.Url ?? video.Snippet.Thumbnails.High.Url)" /></a>
            <BSCard IsInverse="true" CardType="CardType.Body">
                <BSCard IsInverse="true" CardType="CardType.Title"><a href="@TempusUtilities.GetYoutubeUrl(video.Snippet.ResourceId.VideoId)">@video.Snippet.Title</a></BSCard>
                <BSCard IsInverse="true" CardType="CardType.Subtitle">@(new string(video.Snippet.Description.Take(50).ToArray())+"...")</BSCard>
                <BSCard IsInverse="true" CardType="CardType.Text"><small class="text-muted">@video.Snippet.PublishedAt.Value.GetTimeStringSinceDateTime()</small></BSCard>
            </BSCard>
        </BSCard>
    }
</BSCard>
}

@code{
    public List<PlaylistItem> Videos;

    [Parameter]
    public string Channel { get; set; }
    [Parameter]
    public bool IsId { get; set; }
    [Parameter]
    public CardType ParentCardType { get; set; }
    [Parameter]
    public int VideoCount { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Videos = await YoutubeAPIService.GetAllVideosAsync(Channel, IsId, pages:1);
    }
}