@page "/servers"
@page "/servers/{ServerDisplayType}"

@using TempusHubBlazor.Models.Tempus.Responses
@using TempusHubBlazor.Services
@using TempusHubBlazor.Utilities

@inject TempusCacheService _tempusCacheService

@implements IDisposable

<div class="heading-wrapper">
    <h1 class="slim-center">Servers</h1>
    <BSDropdown DropdownDirection="DropdownDirection.Left" Class="bsDropDown">
    <BSDropdownToggle Color="Color.Primary">@(ServerDisplayType?.ToStandardCasing() ?? "Country")</BSDropdownToggle>
        <BSDropdownMenu>
            <BSDropdownItem Href="/servers/country" OnClick=@(() => { ServerDisplayType = "Country"; StateHasChanged(); })>Country Cards</BSDropdownItem>
            <BSDropdownItem Href="/servers/list" OnClick=@(() => { ServerDisplayType = "List"; StateHasChanged(); })>List</BSDropdownItem>
        </BSDropdownMenu>
</BSDropdown>
</div>
<br />

@if (ServerStatusList == null || ServerStatusList.Count == 0)
{
    <span>Loading servers...</span>
}
else if (string.Equals(ServerDisplayType, "List", StringComparison.InvariantCultureIgnoreCase))
{
    <table align="center" class="table table-dark table-bordered slim-center">
        <thead>
            <tr>
                <th>Name</th>
                <th>Map</th>
                <th>Players</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var server in ServerStatusList)
            {
                <tr>
                    <td><a href="@HrefHelper.GetServerInfoPath(server.ServerInfo.Shortname)">@server.ServerInfo.Shortname | @server.ServerInfo.Name</a></td>
                    <td>
                        <a href="@HrefHelper.GetMapInfoPath(server.GameInfo.CurrentMap)">@server.GameInfo.CurrentMap</a> @if (server.GameInfo.NextMap != null)
                        {<a href="@HrefHelper.GetMapInfoPath(server.GameInfo.NextMap.ToString())">(@server.GameInfo.NextMap.ToString())</a>}
                    </td>
                    <td>@(server.GameInfo.PlayerCount)/@server.GameInfo.MaxPlayers</td>
                    <td><a href="steam://connect/@server.ServerInfo.Addr:@server.ServerInfo.Port">Connect</a></td>
                </tr>
            }
        </tbody>
    </table>
}
else if (string.IsNullOrWhiteSpace(ServerDisplayType) || string.Equals(ServerDisplayType, "Country", StringComparison.InvariantCultureIgnoreCase))
{
    <BSCard IsOutline="true" IsInverse="true" CardType="CardType.Columns">
        @foreach (var countryGroup in ServerStatusList.GroupBy(x => x.ServerInfo.Country))
        {
            <BSCard IsInverse="true">
                <BSCard CardType="CardType.Body">
                    <BSCard CardType="CardType.Title">@countryGroup.Key</BSCard>
                    <BSCard CardType="CardType.Text">
                        <BSListGroup class="country-group-list">
                            @foreach (var server in countryGroup)
                            {
                                <BSListGroupItem class="country-group-list-item text-white text-center">
                                    <p>
                                        <a href="@HrefHelper.GetServerInfoPath(server.ServerInfo.Shortname)">
                                            @server.ServerInfo.Name
                                        </a>
                                        |
                                        <a href="@HrefHelper.GetMapInfoPath(server.GameInfo.CurrentMap)">@server.GameInfo.CurrentMap</a> |
                                        @(server.GameInfo.PlayerCount)/@server.GameInfo.MaxPlayers
                                    </p>
                                    <div class="text-center">
                                        <a href="steam://connect/@server.ServerInfo.Addr:@server.ServerInfo.Port" class="btn btn-secondary btn-sm">Connect</a>
                                    </div>
                                </BSListGroupItem>
                            }
                        </BSListGroup>
                    </BSCard>
                </BSCard>
            </BSCard>
        }
    </BSCard>
}


@code {

    [Parameter]
    public string ServerDisplayType { get; set; } = "Country";
    public List<ServerStatusModel> ServerStatusList { get; set; }

    protected override void OnInitialized()
    {
        _tempusCacheService.DataUpdated += OnDataUpdated;

        if (_tempusCacheService.ServerStatusList == null || _tempusCacheService.ServerStatusList.Count == 0)
        {
            return;
        }

        ServerStatusList = _tempusCacheService.ServerStatusList
            .Where(x => x?.ServerInfo != null && x.GameInfo != null && !x.ServerInfo.Hidden)
            .OrderByDescending(x => x.GameInfo.PlayerCount).ToList();
    }

    protected override void OnParametersSet() => OnInitialized();
      
    private void OnDataUpdated(object sender, EventArgs e)
    {
        ServerStatusList = _tempusCacheService.ServerStatusList;
    }

    public void Dispose()
    {
        _tempusCacheService.DataUpdated -= OnDataUpdated;
    }
}
