@page "/servers"

@using TempusHubBlazor.Models.Tempus.Responses
@using TempusHubBlazor.Services
@using TempusHubBlazor.Utilities

@inject TempusCacheService TempusCacheService
<div class="heading-wrapper">
    <h1 class="slim-center">Servers</h1>
</div>
<br />

@if (ServerStatusList == null || ServerStatusList.Count == 0)
{
    <span>Loading servers...</span>
}
else
{
    <table align="center" class="table table-dark table-bordered slim-center">
        <thead>
            <tr>
                <th>Name</th>
                <th>Map</th>
                <th>Players</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var server in ServerStatusList)
            {
                <tr>
                    <td><a href="@HrefHelper.GetServerInfoPath(server.ServerInfo.Shortname)">@server.ServerInfo.Shortname | @server.ServerInfo.Name</a></td>
                    <td>
                        <a href="@HrefHelper.GetMapInfoPath(server.GameInfo.CurrentMap)">@server.GameInfo.CurrentMap</a> @if (server.GameInfo.NextMap != null)
                        {<a href="@HrefHelper.GetMapInfoPath(server.GameInfo.NextMap.ToString())">(@server.GameInfo.NextMap.ToString())</a>}
                    </td>
                    <td>@(server.GameInfo.PlayerCount)/@server.GameInfo.MaxPlayers</td>
                    <td><a href="steam://connect/@server.ServerInfo.Addr:@server.ServerInfo.Port">Connect</a></td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    public List<ServerStatusModel> ServerStatusList { get; set; }

    protected override void OnInitialized()
    {
        TempusCacheService.DataUpdated += OnDataUpdated;

        if (TempusCacheService.ServerStatusList == null || TempusCacheService.ServerStatusList.Count == 0)
        {
            return;
        }

        ServerStatusList = TempusCacheService.ServerStatusList
            .Where(x => x != null && x.ServerInfo != null && x.GameInfo != null && !x.ServerInfo.Hidden)
            .OrderByDescending(x => x.GameInfo.PlayerCount).ToList();
    }

    private void OnDataUpdated(object sender, EventArgs e)
    {
        ServerStatusList = TempusCacheService.ServerStatusList;
        InvokeAsync(StateHasChanged);
    }
}
