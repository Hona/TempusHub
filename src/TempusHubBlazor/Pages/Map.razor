@page "/maps/{MapName}"
@page "/map/{MapName}"
@page "/maps/{MapName}/{ZoneSelector}"
@page "/map/{MapName}/{ZoneSelector}"


@using TempusHubBlazor.Data
@using TempusHubBlazor.Models.Tempus
@using TempusHubBlazor.Models.Tempus.Responses
@using TempusHubBlazor.Models.Tempus.DetailedMapList
@using TempusHubBlazor.Constants
@using TempusHubBlazor.Services
@using TempusHubBlazor.Utilities

@inject TempusCacheService _tempusCacheService
@inject TempusDataService _tempusDataService
<div class="heading-wrapper">
    <h1 class="slim-center">@(ParsedMap?.Name ?? MapName)</h1>
</div>
<br />

@if (string.IsNullOrWhiteSpace(MapName) || ParsedMap == null || FullMapOverView == null)
{
    <p>Loading map... If your can read this entire thing several times then the map isn't found</p>
}
else
{
    <p class="slim-center"><img width="32" height="32" src="@LocalFileConstants.SoldierIcon"> T@(ParsedMap.TierInfo.Soldier)  <img width="32" height="32" src="@LocalFileConstants.DemomanIcon"> T@(ParsedMap.TierInfo.Demoman)</p>
    <p class="slim-center">
        <img width="32" height="32" src="@LocalFileConstants.SoldierIcon"> @if (!string.IsNullOrWhiteSpace(ParsedMap.Videos.Soldier))
        {<a href="@(TempusUtilities.GetYoutubeUrl(ParsedMap.Videos.Soldier))">Showcase</a>}
        else
        { <span>No showcase</span>}  <img width="32" height="32" src="@LocalFileConstants.DemomanIcon"> @if (!string.IsNullOrWhiteSpace(ParsedMap.Videos.Demoman))
        {<a href="@(TempusUtilities.GetYoutubeUrl(ParsedMap.Videos.Demoman))">Showcase</a>}
        else
        { <span>No showcase</span>}
    </p>
    <br />
}

@if (FullMapOverView == null)
{
    <p>Loading map runs data...</p>
}
else
{

<div class="slim-center">
    <div class="heading-wrapper">
        <BSDropdown DropdownDirection="DropdownDirection.Down" Class="bsDropDown bsDropDownZones">
            <BSDropdownToggle Color="Color.Primary">@ZoneSelector.ToStandardCasing()</BSDropdownToggle>
            <BSDropdownMenu Class="bsDropdown-menu">
                <BSDropdownItem OnClick=@(async () => { ZoneSelector = "Map"; await OnInitializedAsync(); })>Map</BSDropdownItem>
                @if ((FullMapOverView.ZoneCounts.Course ?? 0) > 1)
                {
                    for (int i = 1; i <= FullMapOverView.ZoneCounts.Course.Value; i++)
                    {
                        var index = i;
                        <BSDropdownItem Href="@("/maps/"+ FullMapOverView.MapInfo.Name + "/c" + index)" OnClick=@(async () => { ZoneSelector = "Course " + index.ToString(); await OnInitializedAsync(); })>@("Course " + index)</BSDropdownItem>
                    }
                }
                @if ((FullMapOverView.ZoneCounts.Bonus ?? 0) >= 1)
                {
                    for (int i = 1; i <= FullMapOverView.ZoneCounts.Bonus.Value; i++)
                    {
                        var index = i;
                        <BSDropdownItem Href="@("/maps/"+ FullMapOverView.MapInfo.Name + "/b" + index)" OnClick=@(async () => { ZoneSelector = "Bonus " + index.ToString(); await OnInitializedAsync(); })>Bonus @index</BSDropdownItem>
                    }
                }


            </BSDropdownMenu>
        </BSDropdown>
    </div>
    @if (ZonedSoldierRecords.Count == 0)
    {
        <p>No soldier runs.</p>
    }
    else
    {
        <table align="center" class="table table-dark table-bordered slim-center multi-table">
            <thead>
                <tr>
                    <th colspan="2">Soldier</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < ZonedSoldierRecords.Count; i++)
                {
                    <tr>
                        <td>#@(i + 1): @TempusUtilities.FormattedDuration(ZonedSoldierRecords[i].Duration)</td>
                        <td><a href="@HrefHelper.GetPlayerInfoPath(ZonedSoldierRecords[i].Id)">@(_tempusCacheService.GetRealName(ZonedSoldierRecords[i].Id) ?? ZonedSoldierRecords[i].Name)</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (ZonedDemomanRecords.Count == 0)
    {
        <p>No demoman runs.</p>
    }
    else
    {
        <table class="table table-dark table-bordered slim-center multi-table">
            <thead>
                <tr>
                    <th colspan="2">Demoman</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < ZonedDemomanRecords.Count; i++)
                {
                    <tr>
                        <td>#@(i + 1): @TempusUtilities.FormattedDuration(ZonedDemomanRecords[i].Duration)</td>
                        <td><a href="@HrefHelper.GetPlayerInfoPath(ZonedDemomanRecords[i].Id)">@(_tempusCacheService.GetRealName(ZonedDemomanRecords[i].Id) ?? ZonedDemomanRecords[i].Name)</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
}

@code{
    [Parameter]
    public string MapName { get; set; }

    public DetailedMapOverviewModel ParsedMap { get; set; }
    public MapFullOverviewModel FullMapOverView { get; set; }
    public List<RecordModel> ZonedSoldierRecords { get; set; }
    public List<RecordModel> ZonedDemomanRecords { get; set; }

    [Parameter]
    public string ZoneSelector { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ParsedMap = MapFromPartialName(MapName);
        FullMapOverView = await _tempusDataService.GetFullMapOverViewAsync(MapName);

        if (string.IsNullOrWhiteSpace(ZoneSelector))
        {
            ZoneSelector = "map";
        }

        ZoneSelector = ZoneSelector.ToLower();

        if (ZoneSelector.Contains("m", StringComparison.InvariantCultureIgnoreCase))
        {
            ZonedSoldierRecords = FullMapOverView.SoldierRuns;
            ZonedDemomanRecords = FullMapOverView.DemomanRuns;
        }
        else if (ZoneSelector.Contains("c", StringComparison.InvariantCultureIgnoreCase)
            && int.TryParse(string.Join(string.Empty, ZoneSelector.Skip(1)), out var zoneCourseIndex))
        {
            var zonedTimes = await _tempusDataService.GetTopZonedTimes(ParsedMap.Name, "course", zoneCourseIndex);
            ZonedSoldierRecords = zonedTimes.Runs.SoldierRuns.Select(x => x.ToRecordModel()).ToList();
            ZonedDemomanRecords = zonedTimes.Runs.DemomanRuns.Select(x => x.ToRecordModel()).ToList();
        }
        else if (ZoneSelector.Contains("b", StringComparison.InvariantCultureIgnoreCase)
            && int.TryParse(string.Join(string.Empty, ZoneSelector.Skip(1)), out var zoneBonusIndex))
        {
            var zonedTimes = await _tempusDataService.GetTopZonedTimes(ParsedMap.Name, "bonus", zoneBonusIndex);
            ZonedSoldierRecords = zonedTimes.Runs.SoldierRuns.Select(x => x.ToRecordModel()).ToList();
            ZonedDemomanRecords = zonedTimes.Runs.DemomanRuns.Select(x => x.ToRecordModel()).ToList();
        }
        StateHasChanged();
    }

    DetailedMapOverviewModel MapFromPartialName(string partialName)
    {
        var parsedMapName = _tempusDataService.ParseMapName(partialName);
        return _tempusCacheService.DetailedMapList.FirstOrDefault(x => x.Name == parsedMapName);
    }

    protected override async Task OnParametersSetAsync() => await OnInitializedAsync();
}