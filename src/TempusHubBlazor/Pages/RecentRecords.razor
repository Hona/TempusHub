@page "/recentrecords"

@using TempusHubBlazor.Data
@using TempusHubBlazor.Models.Tempus.Activity
@using TempusHubBlazor.Models.Tempus.Responses
@using TempusHubBlazor.Utilities
@using TempusHubBlazor.Logging
@inject TempusDataService TempusDataService

<h1>Recent Records</h1>

@if (records == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <colgroup>
            <col width="2*"/>
            <col width="1*"/>
            <col width="1*"/>
        </colgroup>
        <thead>
            <tr>
                <th>Map</th>
                <th>Player</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in recordsWithZonedData)
            {
                <tr>
                    <td>@record.Item1.MapInfo.Name</td>
                    <td>@record.Item1.PlayerInfo.Name</td>
                    <td>@TempusUtilities.FormattedDuration(record.Item1.RecordInfo.Duration) (@TempusUtilities.GetWRSplitString(record.Item1.CachedTime, record.Item2))</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Tuple<MapWr, ZonedRecordsModel>> recordsWithZonedData;

    protected override async Task OnInitializedAsync()
    {
        var records = (await TempusDataService.GetRecentActivityAsync()).MapRecords.ToArray();
        foreach (var record in records)
        {
            recordsWithZonedData.Add(new Tuple<MapWr, ZonedRecordsModel>(record, GetZonedRecords(record)));
        }
    }

    private ZonedRecordsModel GetZonedRecords(MapWr record)
    {
        Logger.LogInfo(record.MapInfo.Name + " " + record.ZoneInfo.Type + " " + record.ZoneInfo.Zoneindex);
        return (TempusDataService.GetTopZonedTimes(record.MapInfo.Name, record.ZoneInfo.Type, record.ZoneInfo.Zoneindex).GetAwaiter().GetResult());
    }
}
