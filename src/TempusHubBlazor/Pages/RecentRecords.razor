@page "/recentrecords"
@page "/recentrecords/{RecentRecordType}"

@using TempusHubBlazor.Data
@using TempusHubBlazor.Models.Tempus.Activity
@using TempusHubBlazor.Models.Tempus.Responses
@using TempusHubBlazor.Utilities
@using TempusHubBlazor.Models
@using BlazorStrap
@using Constants
@inject TempusDataService TempusDataService

<h1>Recent Records</h1><BSDropdown DropdownDirection="DropdownDirection.Left" Class="bsDropDown">
    <BSDropdownToggle Color="Color.Primary">@RecentRecordType.ToStandardCasing()</BSDropdownToggle>
    <BSDropdownMenu>
        <BSDropdownItem Href="/recentrecords/map" OnClick="OnInitializedAsync">Map WR</BSDropdownItem>
        <BSDropdownItem Href="/recentrecords/course" OnClick="OnInitializedAsync">Course WR</BSDropdownItem>
        <BSDropdownItem Href="/recentrecords/bonus" OnClick="OnInitializedAsync">Bonus WR</BSDropdownItem>
        <BSDropdownItem Href="/recentrecords/map_top" OnClick="OnInitializedAsync">Map Top</BSDropdownItem>
    </BSDropdownMenu>
</BSDropdown>

<br />

@if (recordsWithZonedData == null || recordsWithZonedData.Count == 0)
{
    <p><em>Getting activity data...</em></p>
}
else
{
    <table class="table">
        <colgroup>
            <col width="1*" />
            <col width="8*" />
            <col width="4*" />
            <col width="4*" />
            <col width="4*" />
        </colgroup>
        <thead>
            <tr>
                <th>Class</th>
                <th>Map</th>
                <th>Player</th>
                <th>Time</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var record in recordsWithZonedData)
            {
                <tr>
                    <td><img src="@(record.Record.RecordInfo.Class == 4 ? LocalFileConstants.DemomanIcon : LocalFileConstants.SoldierIcon)" /></td>
                    <td>@((record.Record.ZoneInfo.Type == "map" ? "" : record.Record.ZoneInfo.Type == "course" ? "C" + record.Record.ZoneInfo.Zoneindex + " " : "B" + record.Record.ZoneInfo.Zoneindex + " ") + record.Record.MapInfo.Name)</td>
                    <td>@record.Record.PlayerInfo.Name</td>
                    <td>
                        @(TempusUtilities.FormattedDuration(record.Record.RecordInfo.Duration))
                        @if (record.Record is MapTop mapTopRecord)
                        {
                            @("(#" + mapTopRecord.Rank + " WR +" + ((record.Record.CachedTime != null && record.Record.CachedTime.CurrentWRDuration.HasValue) ? TempusUtilities.FormattedDuration(record.Record.CachedTime.CurrentWRDuration.Value - record.Record.RecordInfo.Duration) : "N/A"));
                        }
                        else
                        {
                            @("("+TempusUtilities.GetWRSplitString(record.Record.CachedTime, record.ZonedData))
                        })
                    </td>
                    <td>@TempusUtilities.GetDateFromSeconds(record.Record.RecordInfo.Date).GetTimeStringSinceDateTime()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string RecentRecordType { get; set; }

    List<RecordWithZonedData> recordsWithZonedData = new List<RecordWithZonedData>();


    protected override async Task OnInitializedAsync()
    {
        List<RecordWithZonedData> recordsWithZonedDataTemp = new List<RecordWithZonedData>();
        if (string.IsNullOrWhiteSpace(RecentRecordType))
        {
            RecentRecordType = "Map";
        }
        var allActivity = (await TempusDataService.GetRecentActivityAsync());
        TempusRecordBase[] selectedRecords;

        switch (RecentRecordType.ToLower())
        {
            case "map":
                selectedRecords = allActivity.MapRecords.ToArray();
                break;
            case "course":
                selectedRecords = allActivity.CourseRecords.ToArray();
                break;
            case "bonus":
                selectedRecords = allActivity.BonusRecords.ToArray();
                break;
            case "map_top":
                selectedRecords = allActivity.MapTopTimes.ToArray();
                break;
            default:
                throw new Exception("No activity data for that type.");
        }

        var tasks = selectedRecords.Select(async x => recordsWithZonedDataTemp.Add(await TempusDataService.PopulateRecordDataAsync(x)));
        await Task.WhenAll(tasks);
        recordsWithZonedData = recordsWithZonedDataTemp.OrderByDescending(x => x.Record.RecordInfo.Date).ToList();
    }
}
